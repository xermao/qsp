diff -u -r d:/wx/wxWidgets/Makefile.in d:/wx/wx_qsp/Makefile.in
--- d:/wx/wxWidgets/Makefile.in	2008-12-28 14:32:49 +0000
+++ d:/wx/wx_qsp/Makefile.in	2009-01-03 17:27:30 +0000
@@ -15668,8 +15668,8 @@
 monodll_gtk_aboutdlg.o: $(srcdir)/src/gtk/aboutdlg.cpp $(MONODLL_ODEP)
 	$(CXXC) -c -o $@ $(MONODLL_CXXFLAGS) $(srcdir)/src/gtk/aboutdlg.cpp
 
-monodll_animate.o: $(srcdir)/src/gtk/animate.cpp $(MONODLL_ODEP)
-	$(CXXC) -c -o $@ $(MONODLL_CXXFLAGS) $(srcdir)/src/gtk/animate.cpp
+monodll_animate.o: $(srcdir)/src/generic/animateg.cpp $(MONODLL_ODEP)
+	$(CXXC) -c -o $@ $(MONODLL_CXXFLAGS) $(srcdir)/src/generic/animateg.cpp
 
 monodll_gtk_bmpcbox.o: $(srcdir)/src/gtk/bmpcbox.cpp $(MONODLL_ODEP)
 	$(CXXC) -c -o $@ $(MONODLL_CXXFLAGS) $(srcdir)/src/gtk/bmpcbox.cpp
@@ -20324,8 +20324,8 @@
 monolib_gtk_aboutdlg.o: $(srcdir)/src/gtk/aboutdlg.cpp $(MONOLIB_ODEP)
 	$(CXXC) -c -o $@ $(MONOLIB_CXXFLAGS) $(srcdir)/src/gtk/aboutdlg.cpp
 
-monolib_animate.o: $(srcdir)/src/gtk/animate.cpp $(MONOLIB_ODEP)
-	$(CXXC) -c -o $@ $(MONOLIB_CXXFLAGS) $(srcdir)/src/gtk/animate.cpp
+monolib_animate.o: $(srcdir)/src/generic/animateg.cpp $(MONOLIB_ODEP)
+	$(CXXC) -c -o $@ $(MONOLIB_CXXFLAGS) $(srcdir)/src/generic/animateg.cpp
 
 monolib_gtk_bmpcbox.o: $(srcdir)/src/gtk/bmpcbox.cpp $(MONOLIB_ODEP)
 	$(CXXC) -c -o $@ $(MONOLIB_CXXFLAGS) $(srcdir)/src/gtk/bmpcbox.cpp
@@ -31409,8 +31409,8 @@
 advdll_gtk_aboutdlg.o: $(srcdir)/src/gtk/aboutdlg.cpp $(ADVDLL_ODEP)
 	$(CXXC) -c -o $@ $(ADVDLL_CXXFLAGS) $(srcdir)/src/gtk/aboutdlg.cpp
 
-advdll_animate.o: $(srcdir)/src/gtk/animate.cpp $(ADVDLL_ODEP)
-	$(CXXC) -c -o $@ $(ADVDLL_CXXFLAGS) $(srcdir)/src/gtk/animate.cpp
+advdll_animate.o: $(srcdir)/src/generic/animateg.cpp $(ADVDLL_ODEP)
+	$(CXXC) -c -o $@ $(ADVDLL_CXXFLAGS) $(srcdir)/src/generic/animateg.cpp
 
 advdll_gtk_bmpcbox.o: $(srcdir)/src/gtk/bmpcbox.cpp $(ADVDLL_ODEP)
 	$(CXXC) -c -o $@ $(ADVDLL_CXXFLAGS) $(srcdir)/src/gtk/bmpcbox.cpp
@@ -31712,8 +31712,8 @@
 advlib_gtk_aboutdlg.o: $(srcdir)/src/gtk/aboutdlg.cpp $(ADVLIB_ODEP)
 	$(CXXC) -c -o $@ $(ADVLIB_CXXFLAGS) $(srcdir)/src/gtk/aboutdlg.cpp
 
-advlib_animate.o: $(srcdir)/src/gtk/animate.cpp $(ADVLIB_ODEP)
-	$(CXXC) -c -o $@ $(ADVLIB_CXXFLAGS) $(srcdir)/src/gtk/animate.cpp
+advlib_animate.o: $(srcdir)/src/generic/animateg.cpp $(ADVLIB_ODEP)
+	$(CXXC) -c -o $@ $(ADVLIB_CXXFLAGS) $(srcdir)/src/generic/animateg.cpp
 
 advlib_gtk_bmpcbox.o: $(srcdir)/src/gtk/bmpcbox.cpp $(ADVLIB_ODEP)
 	$(CXXC) -c -o $@ $(ADVLIB_CXXFLAGS) $(srcdir)/src/gtk/bmpcbox.cpp
diff -u -r d:/wx/wxWidgets/include/wx/animate.h d:/wx/wx_qsp/include/wx/animate.h
--- d:/wx/wxWidgets/include/wx/animate.h	2008-11-03 13:31:04 +0000
+++ d:/wx/wx_qsp/include/wx/animate.h	2009-01-03 17:27:30 +0000
@@ -115,11 +115,15 @@
 // include the platform-specific version of the wxAnimationCtrl class
 // ----------------------------------------------------------------------------
 
+// HzD_Byte's hack
+/*
 #if defined(__WXGTK20__) && !defined(__WXUNIVERSAL__)
     #include "wx/gtk/animate.h"
 #else
     #include "wx/generic/animate.h"
 #endif
+*/
+#include "wx/generic/animate.h"
 
 #endif // wxUSE_ANIMATIONCTRL
 
diff -u -r d:/wx/wxWidgets/include/wx/animdecod.h d:/wx/wx_qsp/include/wx/animdecod.h
--- d:/wx/wxWidgets/include/wx/animdecod.h	2007-12-17 15:05:53 +0000
+++ d:/wx/wx_qsp/include/wx/animdecod.h	2009-01-03 17:27:30 +0000
@@ -123,6 +123,9 @@
     // the transparent colour for this frame if any or wxNullColour.
     virtual wxColour GetTransparentColour(unsigned int frame) const = 0;
 
+    // HzD_Byte's hack
+    bool IsAnimation() const { return m_nFrames > 1; }
+
     // get global data
     wxSize GetAnimationSize() const { return m_szAnimation; }
     wxColour GetBackgroundColour() const { return m_background; }
diff -u -r d:/wx/wxWidgets/include/wx/aui/floatpane.h d:/wx/wx_qsp/include/wx/aui/floatpane.h
--- d:/wx/wxWidgets/include/wx/aui/floatpane.h	2008-05-30 13:09:38 +0000
+++ d:/wx/wx_qsp/include/wx/aui/floatpane.h	2009-01-03 17:27:30 +0000
@@ -32,6 +32,8 @@
 class WXDLLIMPEXP_AUI wxAuiFloatingFrame : public wxAuiFloatingFrameBaseClass
 {
 public:
+    // HzD_Byte's hack
+    /*
     wxAuiFloatingFrame(wxWindow* parent,
                    wxAuiManager* owner_mgr,
                    const wxAuiPaneInfo& pane,
@@ -40,6 +42,15 @@
                                 wxFRAME_NO_TASKBAR | wxFRAME_FLOAT_ON_PARENT | 
                                 wxCLIP_CHILDREN
                    );
+    */
+    wxAuiFloatingFrame(wxWindow* parent,
+                   wxAuiManager* owner_mgr,
+                   const wxAuiPaneInfo& pane,
+                   wxWindowID id = wxID_ANY,
+                   long style = wxSYSTEM_MENU | wxCAPTION |
+                                wxFRAME_NO_TASKBAR | wxFRAME_FLOAT_ON_PARENT | 
+                                wxCLIP_CHILDREN
+                   );
     virtual ~wxAuiFloatingFrame();
     void SetPaneWindow(const wxAuiPaneInfo& pane);
     wxAuiManager* GetOwnerManager() const;
diff -u -r d:/wx/wxWidgets/include/wx/generic/animate.h d:/wx/wx_qsp/include/wx/generic/animate.h
--- d:/wx/wxWidgets/include/wx/generic/animate.h	2008-05-18 06:15:58 +0000
+++ d:/wx/wx_qsp/include/wx/generic/animate.h	2009-01-03 17:27:30 +0000
@@ -27,8 +27,13 @@
     wxAnimation(const wxString &name, wxAnimationType type = wxANIMATION_TYPE_ANY)
         { LoadFile(name, type); }
 
+    // HzD_Byte's hack
+    /*
     virtual bool IsOk() const
         { return m_refData != NULL; }
+    */
+    virtual bool IsOk() const
+        { return m_refData != NULL && wx_static_cast(wxAnimationDecoder *, m_refData)->IsAnimation(); }
 
     virtual unsigned int GetFrameCount() const;
     virtual int GetDelay(unsigned int i) const;
@@ -168,7 +173,11 @@
 
     wxBitmap      m_backingStore;     // The frames are drawn here and then blitted
                                       // on the screen
-
+    // HzD_Byte's hack
+    int m_scalePosX;
+    int m_scalePosY;
+    int m_scaleWidth;
+    int m_scaleHeight;
 private:
     typedef wxAnimationCtrlBase base_type;
     DECLARE_DYNAMIC_CLASS(wxAnimationCtrl)
diff -u -r d:/wx/wxWidgets/include/wx/gifdecod.h d:/wx/wx_qsp/include/wx/gifdecod.h
--- d:/wx/wxWidgets/include/wx/gifdecod.h	2008-03-29 12:48:52 +0000
+++ d:/wx/wx_qsp/include/wx/gifdecod.h	2009-01-03 17:27:30 +0000
@@ -66,8 +66,11 @@
     virtual long GetDelay(unsigned int frame) const;
 
     // GIFs can contain both static images and animations
+    // HzD_Byte's hack
+    /*
     bool IsAnimation() const
         { return m_nFrames > 1; }
+    */
 
     // load function which returns more info than just Load():
     wxGIFErrorCode LoadGIF( wxInputStream& stream );
diff -u -r d:/wx/wxWidgets/include/wx/htmllbox.h d:/wx/wx_qsp/include/wx/htmllbox.h
--- d:/wx/wxWidgets/include/wx/htmllbox.h	2008-12-30 17:48:37 +0000
+++ d:/wx/wx_qsp/include/wx/htmllbox.h	2009-01-03 17:27:30 +0000
@@ -91,6 +91,11 @@
     // this function may be overridden to decorate HTML returned by OnGetItem()
     virtual wxString OnGetItemMarkup(size_t n) const;
 
+    // HzD_Byte's hack
+    virtual wxHtmlOpeningStatus OnOpeningURL(wxHtmlURLType WXUNUSED(type),
+        const wxString& WXUNUSED(url),
+        wxString *WXUNUSED(redirect)) const
+    { return wxHTML_OPEN; }
 
     // this method allows to customize the selection appearance: it may be used
     // to specify the colour of the text which normally has the given colour
@@ -130,6 +135,14 @@
     // ensure that the given item is cached
     void CacheItem(size_t n) const;
 
+    // HzD_Byte's hack
+    void CreateHTMLParser() const;
+    void SetFonts(wxString normal_face, wxString fixed_face,
+        const int *sizes = NULL);
+    void SetStandardFonts(int size = -1,
+        const wxString& normal_face = wxEmptyString,
+        const wxString& fixed_face = wxEmptyString);
+
 private:
     // wxHtmlWindowInterface methods:
     virtual void SetHTMLWindowTitle(const wxString& title);
diff -u -r d:/wx/wxWidgets/src/aui/floatpane.cpp d:/wx/wx_qsp/src/aui/floatpane.cpp
--- d:/wx/wxWidgets/src/aui/floatpane.cpp	2008-08-08 14:30:08 +0000
+++ d:/wx/wx_qsp/src/aui/floatpane.cpp	2009-01-03 17:27:30 +0000
@@ -145,10 +145,13 @@
         SetClientSize(size);
     }
     
+    // HzD_Byte's hack
+    /*
     if (pane.IsFixed())
     {
         SetWindowStyleFlag(GetWindowStyleFlag() & ~wxRESIZE_BORDER);
     }
+    */
 }
 
 wxAuiManager* wxAuiFloatingFrame::GetOwnerManager() const
diff -u -r d:/wx/wxWidgets/src/aui/framemanager.cpp d:/wx/wx_qsp/src/aui/framemanager.cpp
--- d:/wx/wxWidgets/src/aui/framemanager.cpp	2008-11-20 19:55:25 +0000
+++ d:/wx/wx_qsp/src/aui/framemanager.cpp	2009-01-03 17:27:30 +0000
@@ -2576,6 +2576,8 @@
                 p.window->Refresh();
                 p.window->Update();
             }
+            // HzD_Byte's hack
+            p.BestSize(p.rect.GetSize());
         }
     }
 
diff -u -r d:/wx/wxWidgets/src/common/filesys.cpp d:/wx/wx_qsp/src/common/filesys.cpp
--- d:/wx/wxWidgets/src/common/filesys.cpp	2008-10-22 11:52:00 +0000
+++ d:/wx/wx_qsp/src/common/filesys.cpp	2009-01-03 17:27:30 +0000
@@ -627,7 +627,8 @@
         path = path.Mid(2);
 #endif
 
-    path = wxURI::Unescape(path);
+    // HzD_Byte's hack
+    // path = wxURI::Unescape(path);
 
 #ifdef __WXMSW__
     // file urls either start with a forward slash (local harddisk),
diff -u -r d:/wx/wxWidgets/src/generic/animateg.cpp d:/wx/wx_qsp/src/generic/animateg.cpp
--- d:/wx/wxWidgets/src/generic/animateg.cpp	2008-11-03 13:30:56 +0000
+++ d:/wx/wx_qsp/src/generic/animateg.cpp	2009-01-03 17:27:30 +0000
@@ -278,6 +278,8 @@
     m_currentFrame = 0;
     m_looped = false;
     m_isPlaying = false;
+    // HzD_Byte's hack
+    m_scalePosX = m_scalePosY = m_scaleWidth = m_scaleHeight = 0;
 
     // use the window background colour by default to be consistent
     // with the GTK+ native version
@@ -337,6 +339,10 @@
 
     // set new animation even if it's wxNullAnimation
     m_animation = animation;
+    // HzD_Byte's hack
+    wxSizeEvent e;
+    OnSize(e);
+
     if (!m_animation.IsOk())
     {
         DisplayStaticImage();
@@ -438,6 +444,8 @@
 {
     // if we've not created the backing store yet or it's too
     // small, then recreate it
+    // HzD_Byte's hack
+    /*
     wxSize sz = m_animation.GetSize(),
            winsz = GetClientSize();
     int w = wxMin(sz.GetWidth(), winsz.GetWidth());
@@ -449,6 +457,15 @@
         if (!m_backingStore.Create(w, h))
             return false;
     }
+    */
+    wxSize sz = m_animation.GetSize();
+    int w = sz.GetWidth(), h = sz.GetHeight();
+    if (!m_backingStore.IsOk() ||
+        m_backingStore.GetWidth() != w || m_backingStore.GetHeight() != h)
+    {
+        if (!m_backingStore.Create(w, h))
+            return false;
+    }
 
     wxMemoryDC dc;
     dc.SelectObject(m_backingStore);
@@ -581,7 +598,10 @@
     wxASSERT( m_backingStore.IsOk() );
 
     // m_backingStore always contains the current frame
-    dc.DrawBitmap(m_backingStore, 0, 0, true /* use mask in case it's present */);
+    // HzD_Byte's hack
+    // dc.DrawBitmap(m_backingStore, 0, 0, true /* use mask in case it's present */);
+    wxBitmap bitmap(m_backingStore.ConvertToImage().Scale(m_scaleWidth, m_scaleHeight));
+    dc.DrawBitmap(bitmap, m_scalePosX, m_scalePosY, true);
 }
 
 void wxAnimationCtrl::DisposeToBackground()
@@ -629,7 +649,10 @@
         // NOTE: we draw the bitmap explicitely ignoring the mask (if any);
         //       i.e. we don't want to combine the backing store with the 
         //       possibly wrong preexisting contents of the window!
-        dc.DrawBitmap(m_backingStore, 0, 0, false /* no mask */);
+        // HzD_Byte's hack
+        // dc.DrawBitmap(m_backingStore, 0, 0, false /* no mask */);
+        wxBitmap bitmap(m_backingStore.ConvertToImage().Scale(m_scaleWidth, m_scaleHeight));
+        dc.DrawBitmap(bitmap, m_scalePosX, m_scalePosY, false);
     }
     else
     {
@@ -689,6 +712,20 @@
             if (!RebuildBackingStoreUpToFrame(m_currentFrame))
                 Stop();     // in case we are playing
         }
+        // HzD_Byte's hack
+        int w, h, srcW, srcH;
+        wxSize srcSize = m_animation.GetSize();
+        GetClientSize(&w, &h);
+        srcW = srcSize.GetWidth();
+        srcH = srcSize.GetHeight();
+        m_scaleWidth = srcW * h / srcH;
+        m_scaleHeight = srcH * w / srcW;
+        if (m_scaleWidth > w)
+            m_scaleWidth = w;
+        else
+            m_scaleHeight = h;
+        m_scalePosX = (w - m_scaleWidth) / 2;
+        m_scalePosY = (h - m_scaleHeight) / 2;
     }
 }
 
diff -u -r d:/wx/wxWidgets/src/generic/htmllbox.cpp d:/wx/wx_qsp/src/generic/htmllbox.cpp
--- d:/wx/wxWidgets/src/generic/htmllbox.cpp	2008-11-03 13:30:56 +0000
+++ d:/wx/wx_qsp/src/generic/htmllbox.cpp	2009-01-03 17:27:30 +0000
@@ -301,6 +301,8 @@
 {
     if ( !m_cache->Has(n) )
     {
+        // HzD_Byte's hack
+        /*
         if ( !m_htmlParser )
         {
             wxHtmlListBox *self = wxConstCast(this, wxHtmlListBox);
@@ -315,6 +317,8 @@
             // use system's default GUI font by default:
             m_htmlParser->SetStandardFonts();
         }
+        */
+        CreateHTMLParser();
 
         wxHtmlContainerCell *cell = (wxHtmlContainerCell *)m_htmlParser->
                 Parse(OnGetItemMarkup(n));
@@ -330,6 +334,39 @@
     }
 }
 
+// HzD_Byte's hack
+void wxHtmlListBox::CreateHTMLParser() const
+{
+    if (!m_htmlParser)
+    {
+        wxHtmlListBox *self = wxConstCast(this, wxHtmlListBox);
+        self->m_htmlParser = new wxHtmlWinParser(self);
+        m_htmlParser->SetDC(new wxClientDC(self));
+        m_htmlParser->SetFS(&self->m_filesystem);
+#if !wxUSE_UNICODE
+        if (GetFont().Ok())
+            m_htmlParser->SetInputEncoding(GetFont().GetEncoding());
+#endif
+        m_htmlParser->SetStandardFonts();
+    }
+}
+
+void wxHtmlListBox::SetFonts(wxString normal_face, wxString fixed_face, const int *sizes)
+{
+    CreateHTMLParser();
+    m_htmlParser->SetFonts(normal_face, fixed_face, sizes);
+    RefreshAll();
+}
+
+void wxHtmlListBox::SetStandardFonts(int size,
+                                     const wxString& normal_face,
+                                     const wxString& fixed_face)
+{
+    CreateHTMLParser();
+    m_htmlParser->SetStandardFonts(size, normal_face, fixed_face);
+    RefreshAll();
+}
+
 void wxHtmlListBox::OnSize(wxSizeEvent& event)
 {
     // we need to relayout all the cached cells
@@ -456,6 +493,8 @@
     GetEventHandler()->ProcessEvent(event);
 }
 
+// HzD_Byte's hack
+/*
 wxHtmlOpeningStatus
 wxHtmlListBox::OnHTMLOpeningURL(wxHtmlURLType WXUNUSED(type),
                                 const wxString& WXUNUSED(url),
@@ -463,6 +502,14 @@
 {
     return wxHTML_OPEN;
 }
+*/
+wxHtmlOpeningStatus
+wxHtmlListBox::OnHTMLOpeningURL(wxHtmlURLType type,
+                                const wxString& url,
+                                wxString *redirect) const
+{
+    return OnOpeningURL(type, url, redirect);
+}
 
 wxPoint wxHtmlListBox::HTMLCoordsToWindow(wxHtmlCell *cell,
                                           const wxPoint& pos) const
diff -u -r d:/wx/wxWidgets/src/html/htmlwin.cpp d:/wx/wx_qsp/src/html/htmlwin.cpp
--- d:/wx/wxWidgets/src/html/htmlwin.cpp	2008-10-20 06:57:35 +0000
+++ d:/wx/wx_qsp/src/html/htmlwin.cpp	2009-01-03 17:27:30 +0000
@@ -451,7 +451,8 @@
     // ...and run the parser on it:
     wxClientDC *dc = new wxClientDC(this);
     dc->SetMapMode(wxMM_TEXT);
-    SetBackgroundColour(wxColour(0xFF, 0xFF, 0xFF));
+    // HzD_Byte's hack
+    // SetBackgroundColour(wxColour(0xFF, 0xFF, 0xFF));
     SetBackgroundImage(wxNullBitmap);
 
     m_Parser->SetDC(dc);
diff -u -r d:/wx/wxWidgets/src/html/winpars.cpp d:/wx/wx_qsp/src/html/winpars.cpp
--- d:/wx/wxWidgets/src/html/winpars.cpp	2008-05-09 08:42:06 +0000
+++ d:/wx/wx_qsp/src/html/winpars.cpp	2009-01-03 17:27:30 +0000
@@ -298,6 +298,8 @@
     {
         wxString myfullurl(myurl);
 
+        // HzD_Byte's hack
+        /*
         // consider url as absolute path first
         wxURI current(myurl);
         myfullurl = current.BuildUnescapedURI();
@@ -326,6 +328,7 @@
                 }
             }
         }
+        */
 
         wxString redirect;
         status = m_windowInterface->OnHTMLOpeningURL(type, myfullurl, &redirect);
diff -u -r d:/wx/wxWidgets/src/msw/menu.cpp d:/wx/wx_qsp/src/msw/menu.cpp
--- d:/wx/wxWidgets/src/msw/menu.cpp	2008-11-03 13:30:53 +0000
+++ d:/wx/wx_qsp/src/msw/menu.cpp	2009-01-03 17:27:30 +0000
@@ -447,10 +447,14 @@
     if ( pItem->IsOwnerDrawn() )
     {
         // is the item owner-drawn just because of the [checked] bitmap?
+        // HzD_Byte's hack
+        /*
         if ( (pItem->GetBitmap(false).Ok() || pItem->GetBitmap(true).Ok()) &&
                 !pItem->GetTextColour().Ok() &&
                     !pItem->GetBackgroundColour().Ok() &&
                         !pItem->GetFont().Ok() )
+        */
+        if (false)
         {
             // try to use InsertMenuItem() as it's guaranteed to look correct
             // while our owner-drawn code is not
diff -u -r d:/wx/wxWidgets/src/msw/ownerdrw.cpp d:/wx/wx_qsp/src/msw/ownerdrw.cpp
--- d:/wx/wxWidgets/src/msw/ownerdrw.cpp	2008-09-05 16:52:43 +0000
+++ d:/wx/wx_qsp/src/msw/ownerdrw.cpp	2009-01-03 17:27:30 +0000
@@ -273,6 +273,8 @@
 
     // add a 4-pixel separator, otherwise menus look cluttered
     *pwidth += 4;
+    // HzD_Byte's hack
+    *pheight += 4;
 
     // make sure that this item is at least as tall as the system menu height
     const size_t heightStd = wxMSWSystemMenuFontModule::GetSystemMenuHeight();
diff -u -r d:/wx/wxWidgets/src/stc/scintilla/src/LexVB.cxx d:/wx/wx_qsp/src/stc/scintilla/src/LexVB.cxx
--- d:/wx/wxWidgets/src/stc/scintilla/src/LexVB.cxx	2008-09-03 17:19:16 +0000
+++ d:/wx/wx_qsp/src/stc/scintilla/src/LexVB.cxx	2009-01-03 17:27:30 +0000
@@ -1,8 +1,8 @@
 // Scintilla source code edit control
 /** @file LexVB.cxx
- ** Lexer for Visual Basic and VBScript.
+ ** Lexer for QSP.
  **/
-// Copyright 1998-2005 by Neil Hodgson <neilh@scintilla.org>
+// Copyright 2008 by Valeriy Argunov <nporep@mail.ru>
 // The License.txt file describes the conditions under which this software may be distributed.
 
 #include <stdlib.h>
@@ -24,39 +24,25 @@
 using namespace Scintilla;
 #endif
 
-// Internal state, highlighted as number
-#define SCE_B_FILENUMBER SCE_B_DEFAULT+100
-
-
-static bool IsVBComment(Accessor &styler, int pos, int len) {
-	return len > 0 && styler[pos] == '\'';
-}
-
-static inline bool IsTypeCharacter(int ch) {
-	return ch == '%' || ch == '&' || ch == '@' || ch == '!' || ch == '#' || ch == '$';
+static bool IsComment(Accessor &styler, int pos, int len) {
+	char style = styler.StyleAt(pos);
+	return len > 0 && (style == SCE_B_PREPROCESSOR || style == SCE_B_DATE || style == SCE_B_COMMENT);
 }
 
-// Extended to accept accented characters
 static inline bool IsAWordChar(int ch) {
-	return ch >= 0x80 ||
-	       (isalnum(ch) || ch == '.' || ch == '_');
+	return (ch >= 0x80 || isalnum(ch) || ch == '_' || ch == '$');
 }
 
 static inline bool IsAWordStart(int ch) {
-	return ch >= 0x80 ||
-	       (isalpha(ch) || ch == '_');
+	return (ch >= 0x80 || isalpha(ch) || ch == '_' || ch == '$');
 }
 
 static inline bool IsANumberChar(int ch) {
-	// Not exactly following number definition (several dots are seen as OK, etc.)
-	// but probably enough in most cases.
-	return (ch < 0x80) &&
-	        (isdigit(ch) || toupper(ch) == 'E' ||
-             ch == '.' || ch == '-' || ch == '+');
+	return (ch < 0x80 && isdigit(ch));
 }
 
-static void ColouriseVBDoc(unsigned int startPos, int length, int initStyle,
-                           WordList *keywordlists[], Accessor &styler, bool vbScriptSyntax) {
+static void ColouriseVBDoc(unsigned int startPos, int length, int initStyle, WordList *keywordlists[], Accessor &styler) {
+	char s[100];
 
 	WordList &keywords = *keywordlists[0];
 	WordList &keywords2 = *keywordlists[1];
@@ -64,209 +50,169 @@
 	WordList &keywords4 = *keywordlists[3];
 
 	styler.StartAt(startPos);
-
-	int visibleChars = 0;
-	int fileNbDigits = 0;
-
-	// Do not leak onto next line
-	if (initStyle == SCE_B_STRINGEOL || initStyle == SCE_B_COMMENT || initStyle == SCE_B_PREPROCESSOR) {
-		initStyle = SCE_B_DEFAULT;
-	}
-
 	StyleContext sc(startPos, length, initStyle, styler);
 
-	for (; sc.More(); sc.Forward()) {
+	if (sc.state != SCE_B_STRING && sc.state != SCE_B_STRINGEOL &&
+		sc.state != SCE_B_PREPROCESSOR && sc.state != SCE_B_DATE) {
+		sc.SetState(SCE_B_CONSTANT); // Begin of line
+	}
 
+	while (sc.More()) {
 		if (sc.state == SCE_B_OPERATOR) {
 			sc.SetState(SCE_B_DEFAULT);
+		} else if (sc.state == SCE_B_LABEL) {
+			if (sc.ch == '&') {
+				sc.SetState(SCE_B_DEFAULT);
+			}
 		} else if (sc.state == SCE_B_IDENTIFIER) {
+			sc.GetCurrentLowered(s, sizeof(s));
 			if (!IsAWordChar(sc.ch)) {
-				// In Basic (except VBScript), a variable name or a function name
-				// can end with a special character indicating the type of the value
-				// held or returned.
-				bool skipType = false;
-				if (!vbScriptSyntax && IsTypeCharacter(sc.ch)) {
-					sc.Forward();	// Skip it
-					skipType = true;
-				}
-				if (sc.ch == ']') {
-					sc.Forward();
-				}
-				char s[100];
-				sc.GetCurrentLowered(s, sizeof(s));
-				if (skipType) {
-					s[strlen(s) - 1] = '\0';
-				}
-				if (strcmp(s, "rem") == 0) {
-					sc.ChangeState(SCE_B_COMMENT);
-				} else {
-					if (keywords.InList(s)) {
-						sc.ChangeState(SCE_B_KEYWORD);
-					} else if (keywords2.InList(s)) {
-						sc.ChangeState(SCE_B_KEYWORD2);
-					} else if (keywords3.InList(s)) {
-						sc.ChangeState(SCE_B_KEYWORD3);
-					} else if (keywords4.InList(s)) {
-						sc.ChangeState(SCE_B_KEYWORD4);
-					}	// Else, it is really an identifier...
-					sc.SetState(SCE_B_DEFAULT);
+				if (keywords.InList(s)) {
+					sc.ChangeState(SCE_B_KEYWORD);
+				} else if (keywords2.InList(s)) {
+					sc.ChangeState(SCE_B_KEYWORD2);
+				} else if (keywords3.InList(s)) {
+					sc.ChangeState(SCE_B_KEYWORD3);
+				} else if (keywords4.InList(s)) {
+					sc.ChangeState(SCE_B_KEYWORD4);
 				}
+				sc.SetState(SCE_B_DEFAULT);
 			}
 		} else if (sc.state == SCE_B_NUMBER) {
-			// We stop the number definition on non-numerical non-dot non-eE non-sign char
-			// Also accepts A-F for hex. numbers
-			if (!IsANumberChar(sc.ch) && !(tolower(sc.ch) >= 'a' && tolower(sc.ch) <= 'f')) {
+			if (!IsANumberChar(sc.ch)) {
 				sc.SetState(SCE_B_DEFAULT);
 			}
-		} else if (sc.state == SCE_B_STRING) {
-			// VB doubles quotes to preserve them, so just end this string
-			// state now as a following quote will start again
+		} else if (sc.state == SCE_B_STRING) { // String 1
+			if (sc.ch == '\'') {
+				if (sc.chNext == '\'') {
+					sc.Forward();
+				} else {
+					sc.ForwardSetState(SCE_B_DEFAULT);
+				}
+			}
+		} else if (sc.state == SCE_B_STRINGEOL) { // String 2
 			if (sc.ch == '\"') {
 				if (sc.chNext == '\"') {
 					sc.Forward();
 				} else {
-					if (tolower(sc.chNext) == 'c') {
-						sc.Forward();
-					}
 					sc.ForwardSetState(SCE_B_DEFAULT);
 				}
-			} else if (sc.atLineEnd) {
-				visibleChars = 0;
-				sc.ChangeState(SCE_B_STRINGEOL);
-				sc.ForwardSetState(SCE_B_DEFAULT);
-			}
-		} else if (sc.state == SCE_B_COMMENT) {
-			if (sc.atLineEnd) {
-				visibleChars = 0;
-				sc.ForwardSetState(SCE_B_DEFAULT);
-			}
-		} else if (sc.state == SCE_B_PREPROCESSOR) {
-			if (sc.atLineEnd) {
-				visibleChars = 0;
-				sc.ForwardSetState(SCE_B_DEFAULT);
 			}
-		} else if (sc.state == SCE_B_FILENUMBER) {
-			if (IsADigit(sc.ch)) {
-				fileNbDigits++;
-				if (fileNbDigits > 3) {
-					sc.ChangeState(SCE_B_DATE);
+		} else if (sc.state == SCE_B_PREPROCESSOR) { // String 1 in the comment
+			if (sc.ch == '\'') {
+				if (sc.chNext == '\'') {
+					sc.Forward();
+				} else {
+					sc.ForwardSetState(SCE_B_COMMENT);
 				}
-			} else if (sc.ch == '\r' || sc.ch == '\n' || sc.ch == ',') {
-				// Regular uses: Close #1; Put #1, ...; Get #1, ... etc.
-				// Too bad if date is format #27, Oct, 2003# or something like that...
-				// Use regular number state
-				sc.ChangeState(SCE_B_NUMBER);
-				sc.SetState(SCE_B_DEFAULT);
-			} else if (sc.ch == '#') {
-				sc.ChangeState(SCE_B_DATE);
-				sc.ForwardSetState(SCE_B_DEFAULT);
-			} else {
-				sc.ChangeState(SCE_B_DATE);
 			}
-			if (sc.state != SCE_B_FILENUMBER) {
-				fileNbDigits = 0;
+		} else if (sc.state == SCE_B_DATE) { // String 2 in the comment
+			if (sc.ch == '\"') {
+				if (sc.chNext == '\"') {
+					sc.Forward();
+				} else {
+					sc.ForwardSetState(SCE_B_COMMENT);
+				}
 			}
-		} else if (sc.state == SCE_B_DATE) {
-			if (sc.atLineEnd) {
-				visibleChars = 0;
-				sc.ChangeState(SCE_B_STRINGEOL);
-				sc.ForwardSetState(SCE_B_DEFAULT);
-			} else if (sc.ch == '#') {
-				sc.ForwardSetState(SCE_B_DEFAULT);
+		} else if (sc.state == SCE_B_COMMENT) {
+			if (sc.ch == '\'') {
+				sc.SetState(SCE_B_PREPROCESSOR); // String 1 in the comment
+			} else if (sc.ch == '\"') {
+				sc.SetState(SCE_B_DATE); // String 2 in the comment
+			} else if (sc.atLineEnd) {
+				sc.SetState(SCE_B_CONSTANT);
 			}
 		}
-
-		if (sc.state == SCE_B_DEFAULT) {
+		if (sc.state == SCE_B_DEFAULT || sc.state == SCE_B_CONSTANT) {
 			if (sc.ch == '\'') {
-				sc.SetState(SCE_B_COMMENT);
+				sc.SetState(SCE_B_STRING); // String 1
 			} else if (sc.ch == '\"') {
-				sc.SetState(SCE_B_STRING);
-			} else if (sc.ch == '#' && visibleChars == 0) {
-				// Preprocessor commands are alone on their line
-				sc.SetState(SCE_B_PREPROCESSOR);
-			} else if (sc.ch == '#') {
-				// It can be a date literal, ending with #, or a file number, from 1 to 511
-				// The date literal depends on the locale, so anything can go between #'s.
-				// Can be #January 1, 1993# or #1 Jan 93# or #05/11/2003#, etc.
-				// So we set the FILENUMBER state, and switch to DATE if it isn't a file number
-				sc.SetState(SCE_B_FILENUMBER);
-			} else if (sc.ch == '&' && tolower(sc.chNext) == 'h') {
-				// Hexadecimal number
-				sc.SetState(SCE_B_NUMBER);
-				sc.Forward();
-			} else if (sc.ch == '&' && tolower(sc.chNext) == 'o') {
-				// Octal number
-				sc.SetState(SCE_B_NUMBER);
-				sc.Forward();
-			} else if (IsADigit(sc.ch) || (sc.ch == '.' && IsADigit(sc.chNext))) {
+				sc.SetState(SCE_B_STRINGEOL); // String 2
+			} else if (sc.state == SCE_B_CONSTANT && sc.ch == '!') {
+				sc.SetState(SCE_B_COMMENT);
+			} else if (sc.state == SCE_B_CONSTANT && sc.ch == ':') {
+				sc.SetState(SCE_B_LABEL);
+			} else if (IsADigit(sc.ch)) {
 				sc.SetState(SCE_B_NUMBER);
-			} else if (IsAWordStart(sc.ch) || (sc.ch == '[')) {
+			} else if (IsAWordStart(sc.ch)) {
 				sc.SetState(SCE_B_IDENTIFIER);
-			} else if (isoperator(static_cast<char>(sc.ch)) || (sc.ch == '\\')) {	// Integer division
+			} else if (isoperator(static_cast<char>(sc.ch)) && (sc.state != SCE_B_CONSTANT || (sc.ch != ' ' && sc.ch != '\t'))) {
 				sc.SetState(SCE_B_OPERATOR);
+				if (sc.ch == '&')
+				{
+					sc.ForwardSetState(SCE_B_CONSTANT); // Begin of line
+					continue;
+				}
 			}
 		}
-
-		if (sc.atLineEnd) {
-			visibleChars = 0;
+		if (sc.atLineEnd &&
+			sc.state != SCE_B_STRING && sc.state != SCE_B_STRINGEOL &&
+			sc.state != SCE_B_PREPROCESSOR && sc.state != SCE_B_DATE) {
+			sc.SetState(SCE_B_CONSTANT); // Begin of line
 		}
-		if (!IsASpace(sc.ch)) {
-			visibleChars++;
+		sc.Forward();
+	}
+	if (sc.state == SCE_B_IDENTIFIER) {
+		sc.GetCurrentLowered(s, sizeof(s));
+		if (keywords.InList(s)) {
+			sc.ChangeState(SCE_B_KEYWORD);
+		} else if (keywords2.InList(s)) {
+			sc.ChangeState(SCE_B_KEYWORD2);
+		} else if (keywords3.InList(s)) {
+			sc.ChangeState(SCE_B_KEYWORD3);
+		} else if (keywords4.InList(s)) {
+			sc.ChangeState(SCE_B_KEYWORD4);
 		}
 	}
 	sc.Complete();
 }
 
-static void FoldVBDoc(unsigned int startPos, int length, int,
-						   WordList *[], Accessor &styler) {
+static void FoldVBDoc(unsigned int startPos, int length, int, WordList *[], Accessor &styler) {
 	int endPos = startPos + length;
-
-	// Backtrack to previous line in case need to fix its fold status
+	int spaceFlags = 0;
+	int indentCurrent;
 	int lineCurrent = styler.GetLine(startPos);
 	if (startPos > 0) {
 		if (lineCurrent > 0) {
 			lineCurrent--;
 			startPos = styler.LineStart(lineCurrent);
 		}
+		indentCurrent = styler.LevelAt(lineCurrent);
 	}
-	int spaceFlags = 0;
-	int indentCurrent = styler.IndentAmount(lineCurrent, &spaceFlags, IsVBComment);
+	else
+		indentCurrent = styler.IndentAmount(lineCurrent, &spaceFlags, IsComment);
 	char chNext = styler[startPos];
-	for (int i = startPos; i < endPos; i++) {
+	for (int i = startPos; i < endPos; ++i) {
 		char ch = chNext;
 		chNext = styler.SafeGetCharAt(i + 1);
 
 		if ((ch == '\r' && chNext != '\n') || (ch == '\n') || (i == endPos)) {
 			int lev = indentCurrent;
-			int indentNext = styler.IndentAmount(lineCurrent + 1, &spaceFlags, IsVBComment);
-			if (!(indentCurrent & SC_FOLDLEVELWHITEFLAG)) {
+			int indentNext = styler.IndentAmount(lineCurrent + 1, &spaceFlags, IsComment);
+			char lastStyle = styler.StyleAt(i);
+			if (!(indentCurrent & SC_FOLDLEVELWHITEFLAG) && (lastStyle != SCE_B_STRING && lastStyle != SCE_B_STRINGEOL)) {
 				// Only non whitespace lines can be headers
 				if ((indentCurrent & SC_FOLDLEVELNUMBERMASK) < (indentNext & SC_FOLDLEVELNUMBERMASK)) {
 					lev |= SC_FOLDLEVELHEADERFLAG;
 				} else if (indentNext & SC_FOLDLEVELWHITEFLAG) {
 					// Line after is blank so check the next - maybe should continue further?
 					int spaceFlags2 = 0;
-					int indentNext2 = styler.IndentAmount(lineCurrent + 2, &spaceFlags2, IsVBComment);
+					int indentNext2 = styler.IndentAmount(lineCurrent + 2, &spaceFlags2, IsComment);
 					if ((indentCurrent & SC_FOLDLEVELNUMBERMASK) < (indentNext2 & SC_FOLDLEVELNUMBERMASK)) {
 						lev |= SC_FOLDLEVELHEADERFLAG;
 					}
 				}
 			}
-			indentCurrent = indentNext;
+			if (lastStyle != SCE_B_STRING && lastStyle != SCE_B_STRINGEOL)
+				indentCurrent = indentNext;
 			styler.SetLevel(lineCurrent, lev);
 			lineCurrent++;
 		}
 	}
 }
 
-static void ColouriseVBNetDoc(unsigned int startPos, int length, int initStyle,
-                           WordList *keywordlists[], Accessor &styler) {
-	ColouriseVBDoc(startPos, length, initStyle, keywordlists, styler, false);
-}
-
-static void ColouriseVBScriptDoc(unsigned int startPos, int length, int initStyle,
-                           WordList *keywordlists[], Accessor &styler) {
-	ColouriseVBDoc(startPos, length, initStyle, keywordlists, styler, true);
+static void ColouriseVBNetDoc(unsigned int startPos, int length, int initStyle, WordList *keywordlists[], Accessor &styler) {
+	ColouriseVBDoc(startPos, length, initStyle, keywordlists, styler);
 }
 
 static const char * const vbWordListDesc[] = {
@@ -278,5 +224,4 @@
 };
 
 LexerModule lmVB(SCLEX_VB, ColouriseVBNetDoc, "vb", FoldVBDoc, vbWordListDesc);
-LexerModule lmVBScript(SCLEX_VBSCRIPT, ColouriseVBScriptDoc, "vbscript", FoldVBDoc, vbWordListDesc);
-
+LexerModule lmVBScript(SCLEX_VBSCRIPT, ColouriseVBNetDoc, "vbscript", FoldVBDoc, vbWordListDesc);
